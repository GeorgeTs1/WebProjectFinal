import { ComponentFactoryResolver, Directive, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { InputfileComponent } from '../components/inputfile.component';
import { ngxInputFileOptions } from '../utils/configuration.model';
export class NgxInputFileDirective {
    constructor(resolver, injector, vcRef, templateRef) {
        this.resolver = resolver;
        this.injector = injector;
        this.vcRef = vcRef;
        this.templateRef = templateRef;
    }
    ngOnInit() {
        const _contentViewRef = this.templateRef.createEmbeddedView(null);
        const factory = this.resolver.resolveComponentFactory(InputfileComponent);
        const component = this.vcRef.createComponent(factory, 0, this.injector, [_contentViewRef.rootNodes]);
        component.instance.options = (this.ngxInputFile) ? this.ngxInputFile : ngxInputFileOptions;
        _contentViewRef.detectChanges();
    }
}
NgxInputFileDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxInputFile]'
            },] }
];
NgxInputFileDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ViewContainerRef },
    { type: TemplateRef }
];
NgxInputFileDirective.propDecorators = {
    ngxInputFile: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRmaWxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaXJlY3RpdmVzL2lucHV0ZmlsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUFnQixTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBVSxXQUFXLEVBQUUsZ0JBQWdCLEVBQzFHLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBb0IsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQU1yRixNQUFNLE9BQU8scUJBQXFCO0lBS2hDLFlBQW9CLFFBQWtDLEVBQVUsUUFBa0IsRUFDOUQsS0FBdUIsRUFBVSxXQUE2QjtRQUQ5RCxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDOUQsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFDbEYsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRSxNQUFNLFNBQVMsR0FBcUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdkksU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO1FBQzNGLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7WUFsQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7YUFDM0I7OztZQVJDLHdCQUF3QjtZQUEyQixRQUFRO1lBQThCLGdCQUFnQjtZQUE3QixXQUFXOzs7MkJBV3RGLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnB1dGZpbGVDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2lucHV0ZmlsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRGaWxlT3B0aW9ucywgbmd4SW5wdXRGaWxlT3B0aW9ucyB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24ubW9kZWwnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hJbnB1dEZpbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbnB1dEZpbGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpXG4gIG5neElucHV0RmlsZTogSW5wdXRGaWxlT3B0aW9ucztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICAgICAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBfY29udGVudFZpZXdSZWYgPSB0aGlzLnRlbXBsYXRlUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhudWxsKTtcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShJbnB1dGZpbGVDb21wb25lbnQpO1xuICAgIGNvbnN0IGNvbXBvbmVudDogQ29tcG9uZW50UmVmPElucHV0ZmlsZUNvbXBvbmVudD4gPSB0aGlzLnZjUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCAwLCB0aGlzLmluamVjdG9yLCBbX2NvbnRlbnRWaWV3UmVmLnJvb3ROb2Rlc10pO1xuICAgIGNvbXBvbmVudC5pbnN0YW5jZS5vcHRpb25zID0gKHRoaXMubmd4SW5wdXRGaWxlKSA/IHRoaXMubmd4SW5wdXRGaWxlIDogbmd4SW5wdXRGaWxlT3B0aW9ucztcbiAgICBfY29udGVudFZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG59XG4iXX0=