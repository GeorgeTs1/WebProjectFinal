export class FileItem {
    constructor(file, uploadService, logger, disableMultipart) {
        this.file = file;
        this.uploadService = uploadService;
        this.logger = logger;
        this.disableMultipart = disableMultipart;
        this.isReady = true;
        this.progress = 0;
        this.formData = new FormData();
        this.alias = 'file';
    }
    upload(endpoint, options) {
        if (endpoint) {
            this.uploadService.uploadFileItem(this, endpoint, options);
        }
        else {
            this.logger.error('You must define a UploadEndPoint object.');
        }
    }
    cancel() {
        this.logger.debug('upload cancel');
        if (this.uploadInProgress) {
            this.ɵonCancel();
            this.uploadService.cancelFileItem(this);
        }
    }
    remove() {
        this.logger.debug('upload remove');
        this.uploadService.removeFromQueue(this);
    }
    ɵonBeforeUploadItem() {
        this.isReady = true;
        this.uploadInProgress = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
    }
    ɵonProgress(progress) {
        this.isReady = false;
        this.progress = progress;
    }
    ɵonSuccess() {
        this.isReady = false;
        this.uploadInProgress = false;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
    }
    ɵonError() {
        this.isReady = false;
        this.uploadInProgress = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
    }
    ɵonCancel() {
        this.isReady = true;
        this.uploadInProgress = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.sub.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZUl0ZW0ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvZmlsZUl0ZW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxPQUFPLFFBQVE7SUFlakIsWUFBbUIsSUFBVSxFQUFVLGFBQXNDLEVBQVksTUFBdUIsRUFDN0YsZ0JBQWdCO1FBRGhCLFNBQUksR0FBSixJQUFJLENBQU07UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7UUFBWSxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUM3RixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQUE7UUFibkMsWUFBTyxHQUFHLElBQUksQ0FBQztRQUlmLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFYixhQUFRLEdBQWEsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUVwQyxVQUFLLEdBQUcsTUFBTSxDQUFDO0lBS3dCLENBQUM7SUFFeEMsTUFBTSxDQUFDLFFBQXdCLEVBQUUsT0FBYTtRQUMxQyxJQUFJLFFBQVEsRUFBRTtZQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDOUQ7YUFBTTtZQUNILElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDakU7SUFDTCxDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELG1CQUFtQjtRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFnQjtRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxTQUFTO1FBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLENBQUM7Q0FHSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5neFVwbG9hZExvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlci5tb2RlbCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVwbG9hZEVuZFBvaW50IH0gZnJvbSAnLi4vdXRpbHMvY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VXBsb2FkU2VydmljZSB9IGZyb20gJy4vaHR0cENsaWVudFVwbG9hZC5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIEZpbGVJdGVtIHtcblxuICAgIHVwbG9hZEluUHJvZ3Jlc3M6IGJvb2xlYW47XG4gICAgaXNSZWFkeSA9IHRydWU7XG4gICAgaXNTdWNjZXNzOiBib29sZWFuO1xuICAgIGlzQ2FuY2VsOiBib29sZWFuO1xuICAgIGlzRXJyb3I6IGJvb2xlYW47XG4gICAgcHJvZ3Jlc3MgPSAwO1xuXG4gICAgZm9ybURhdGE6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICBhbGlhcyA9ICdmaWxlJztcblxuICAgIHN1YjogU3Vic2NyaXB0aW9uO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGZpbGU6IEZpbGUsIHByaXZhdGUgdXBsb2FkU2VydmljZTogSHR0cENsaWVudFVwbG9hZFNlcnZpY2UsIHByb3RlY3RlZCBsb2dnZXI6IE5neFVwbG9hZExvZ2dlcixcbiAgICAgICAgICAgICAgICBwdWJsaWMgZGlzYWJsZU11bHRpcGFydCkgeyB9XG5cbiAgICB1cGxvYWQoZW5kcG9pbnQ6IFVwbG9hZEVuZFBvaW50LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIGlmIChlbmRwb2ludCkge1xuICAgICAgICAgICAgdGhpcy51cGxvYWRTZXJ2aWNlLnVwbG9hZEZpbGVJdGVtKHRoaXMsIGVuZHBvaW50LCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdZb3UgbXVzdCBkZWZpbmUgYSBVcGxvYWRFbmRQb2ludCBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKCd1cGxvYWQgY2FuY2VsJyk7XG4gICAgICAgIGlmICh0aGlzLnVwbG9hZEluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuybVvbkNhbmNlbCgpO1xuICAgICAgICAgICAgdGhpcy51cGxvYWRTZXJ2aWNlLmNhbmNlbEZpbGVJdGVtKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygndXBsb2FkIHJlbW92ZScpO1xuICAgICAgICB0aGlzLnVwbG9hZFNlcnZpY2UucmVtb3ZlRnJvbVF1ZXVlKHRoaXMpO1xuICAgIH1cblxuICAgIMm1b25CZWZvcmVVcGxvYWRJdGVtKCkge1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnVwbG9hZEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0NhbmNlbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgfVxuXG4gICAgybVvblByb2dyZXNzKHByb2dyZXNzOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICB9XG5cbiAgICDJtW9uU3VjY2VzcygpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXBsb2FkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNDYW5jZWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAxMDA7XG4gICAgfVxuXG4gICAgybVvbkVycm9yKCkge1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNDYW5jZWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgfVxuXG4gICAgybVvbkNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNDYW5jZWwgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG5cbn1cbiJdfQ==