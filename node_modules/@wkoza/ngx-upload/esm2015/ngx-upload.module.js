import { InjectionToken, isDevMode, NgModule, Optional, SkipSelf } from '@angular/core';
import { NgxDragAndDropDirective } from './directives/dropzone.directive';
import { NgxThumbnailDirective } from './directives/thumbnail.directive';
import { NgxInputFileDirective } from './directives/inputfile.directive';
import { NGX_DROP_TARGET_OPTIONS, NGX_LOGGER_OPTIONS, ngxDropTargetOptions, ngxloggerOptions } from './utils/configuration.model';
import { ConsoleLogger, NgxUploadLogger, NoOpLogger } from './utils/logger.model';
import { InputfileComponent } from './components/inputfile.component';
const ngxDeclarations = [
    NgxDragAndDropDirective, NgxThumbnailDirective, InputfileComponent, NgxInputFileDirective
];
/**
 * Factory associated with internal logger
 * @param options
 * @returns {any}
 * @private
 */
export function _loggerFactory(options) {
    const enabled = options.enabled ? options.enabled : isDevMode();
    if (enabled) {
        const _console = typeof console === 'object' ? console : {};
        const debug = options.debug ? options.debug : true;
        return new ConsoleLogger(_console, debug);
    }
    return new NoOpLogger();
}
export const NGX_UPLOAD_ROOT_GUARD = new InjectionToken('Internal forRoot Guard');
export function createNgxUploadRootGuard(options) {
    if (options) {
        throw new TypeError('NgxUploadModule.forRoot() is called twice.');
    }
    return 'guarded';
}
export class NgxUploadModule {
    static forRoot(dropTargetOptions, loggerOptions) {
        return {
            ngModule: NgxUploadModule,
            providers: [
                { provide: NGX_LOGGER_OPTIONS, useValue: (loggerOptions) ? loggerOptions : ngxloggerOptions },
                {
                    provide: NGX_DROP_TARGET_OPTIONS,
                    useValue: (dropTargetOptions) ? dropTargetOptions : ngxDropTargetOptions
                },
                {
                    provide: NgxUploadLogger,
                    useFactory: _loggerFactory,
                    deps: [NGX_LOGGER_OPTIONS]
                },
                {
                    provide: NGX_UPLOAD_ROOT_GUARD,
                    useFactory: createNgxUploadRootGuard,
                    deps: [[NGX_LOGGER_OPTIONS, new Optional(), new SkipSelf()]]
                }
            ]
        };
    }
    ;
}
NgxUploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ...ngxDeclarations
                ],
                exports: [
                    ...ngxDeclarations
                ],
                imports: [],
                entryComponents: [InputfileComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVwbG9hZC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbmd4LXVwbG9hZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pFLE9BQU8sRUFFVSx1QkFBdUIsRUFDdEMsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixnQkFBZ0IsRUFDakIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUd0RSxNQUFNLGVBQWUsR0FBRztJQUN0Qix1QkFBdUIsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUI7Q0FDMUYsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFzQjtJQUNuRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoRSxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sUUFBUSxHQUFZLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBTSxFQUFFLENBQUM7UUFDMUUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25ELE9BQU8sSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsT0FBTyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQzFCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBTyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXhGLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxPQUFzQjtJQUM3RCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sSUFBSSxTQUFTLENBQUMsNENBQTRDLENBQUMsQ0FBQTtLQUNsRTtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFhRCxNQUFNLE9BQU8sZUFBZTtJQUUxQixNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFxQyxFQUNsRCxhQUE2QjtRQUc3QixPQUFPO1lBQ0wsUUFBUSxFQUFFLGVBQWU7WUFDekIsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFO2dCQUM3RjtvQkFDRSxPQUFPLEVBQUUsdUJBQXVCO29CQUNoQyxRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsb0JBQW9CO2lCQUN6RTtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLGNBQWM7b0JBQzFCLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFDO2lCQUMzQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUscUJBQXFCO29CQUM5QixVQUFVLEVBQUUsd0JBQXdCO29CQUNwQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2lCQUM3RDthQUNGO1NBQ0YsQ0FBQTtJQUNILENBQUM7SUFBQSxDQUFDOzs7WUFyQ0gsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixHQUFHLGVBQWU7aUJBQ25CO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxHQUFHLGVBQWU7aUJBQ25CO2dCQUNELE9BQU8sRUFBRSxFQUFFO2dCQUNYLGVBQWUsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQ3RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIGlzRGV2TW9kZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4RHJhZ0FuZERyb3BEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvZHJvcHpvbmUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5neFRodW1ibmFpbERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy90aHVtYm5haWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5neElucHV0RmlsZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dGZpbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIERyb3BUYXJnZXRPcHRpb25zLFxuICBMb2dnZXJPcHRpb25zLCBOR1hfRFJPUF9UQVJHRVRfT1BUSU9OUyxcbiAgTkdYX0xPR0dFUl9PUFRJT05TLFxuICBuZ3hEcm9wVGFyZ2V0T3B0aW9ucyxcbiAgbmd4bG9nZ2VyT3B0aW9uc1xufSBmcm9tICcuL3V0aWxzL2NvbmZpZ3VyYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciwgTmd4VXBsb2FkTG9nZ2VyLCBOb09wTG9nZ2VyIH0gZnJvbSAnLi91dGlscy9sb2dnZXIubW9kZWwnO1xuaW1wb3J0IHsgSW5wdXRmaWxlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2lucHV0ZmlsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuY29uc3Qgbmd4RGVjbGFyYXRpb25zID0gW1xuICBOZ3hEcmFnQW5kRHJvcERpcmVjdGl2ZSwgTmd4VGh1bWJuYWlsRGlyZWN0aXZlLCBJbnB1dGZpbGVDb21wb25lbnQsIE5neElucHV0RmlsZURpcmVjdGl2ZVxuXTtcblxuLyoqXG4gKiBGYWN0b3J5IGFzc29jaWF0ZWQgd2l0aCBpbnRlcm5hbCBsb2dnZXJcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7YW55fVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9sb2dnZXJGYWN0b3J5KG9wdGlvbnM6IExvZ2dlck9wdGlvbnMpOiBOZ3hVcGxvYWRMb2dnZXIge1xuICBjb25zdCBlbmFibGVkID0gb3B0aW9ucy5lbmFibGVkID8gb3B0aW9ucy5lbmFibGVkIDogaXNEZXZNb2RlKCk7XG4gIGlmIChlbmFibGVkKSB7XG4gICAgY29uc3QgX2NvbnNvbGU6IENvbnNvbGUgPSB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgPyBjb25zb2xlIDogPGFueT57fTtcbiAgICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuZGVidWcgPyBvcHRpb25zLmRlYnVnIDogdHJ1ZTtcbiAgICByZXR1cm4gbmV3IENvbnNvbGVMb2dnZXIoX2NvbnNvbGUsIGRlYnVnKTtcbiAgfVxuICByZXR1cm4gbmV3IE5vT3BMb2dnZXIoKTtcbn1cblxuZXhwb3J0IGNvbnN0IE5HWF9VUExPQURfUk9PVF9HVUFSRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjx2b2lkPignSW50ZXJuYWwgZm9yUm9vdCBHdWFyZCcpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmd4VXBsb2FkUm9vdEd1YXJkKG9wdGlvbnM6IExvZ2dlck9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOZ3hVcGxvYWRNb2R1bGUuZm9yUm9vdCgpIGlzIGNhbGxlZCB0d2ljZS4nKVxuICB9XG4gIHJldHVybiAnZ3VhcmRlZCc7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIC4uLm5neERlY2xhcmF0aW9uc1xuICBdLFxuICBleHBvcnRzOiBbXG4gICAgLi4ubmd4RGVjbGFyYXRpb25zXG4gIF0sXG4gIGltcG9ydHM6IFtdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtJbnB1dGZpbGVDb21wb25lbnRdXG59KVxuXG5leHBvcnQgY2xhc3MgTmd4VXBsb2FkTW9kdWxlIHtcblxuICBzdGF0aWMgZm9yUm9vdChkcm9wVGFyZ2V0T3B0aW9ucz86IERyb3BUYXJnZXRPcHRpb25zLFxuICAgIGxvZ2dlck9wdGlvbnM/OiBMb2dnZXJPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hVcGxvYWRNb2R1bGU+IHtcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hVcGxvYWRNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBOR1hfTE9HR0VSX09QVElPTlMsIHVzZVZhbHVlOiAobG9nZ2VyT3B0aW9ucykgPyBsb2dnZXJPcHRpb25zIDogbmd4bG9nZ2VyT3B0aW9ucyB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTkdYX0RST1BfVEFSR0VUX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IChkcm9wVGFyZ2V0T3B0aW9ucykgPyBkcm9wVGFyZ2V0T3B0aW9ucyA6IG5neERyb3BUYXJnZXRPcHRpb25zXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOZ3hVcGxvYWRMb2dnZXIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogX2xvZ2dlckZhY3RvcnksXG4gICAgICAgICAgZGVwczogW05HWF9MT0dHRVJfT1BUSU9OU11cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HWF9VUExPQURfUk9PVF9HVUFSRCxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBjcmVhdGVOZ3hVcGxvYWRSb290R3VhcmQsXG4gICAgICAgICAgZGVwczogW1tOR1hfTE9HR0VSX09QVElPTlMsIG5ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKV1dXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH07XG59XG5cbiJdfQ==