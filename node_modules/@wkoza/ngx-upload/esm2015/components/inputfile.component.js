import { Component, Injector, Optional, Renderer2, ViewChild } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { HttpClientUploadService } from '../services/httpClientUpload.service';
export class InputfileComponent {
    constructor(injector, uploader, renderer, ngForm, formGroupDirective) {
        this.injector = injector;
        this.uploader = uploader;
        this.renderer = renderer;
        this.ngForm = ngForm;
        this.formGroupDirective = formGroupDirective;
        this.files = new Set();
        if (this.ngForm) {
            this.formGroup = ngForm.form;
        }
        else if (this.formGroupDirective) {
            this.formGroup = formGroupDirective.form;
        }
        else {
            this.formGroup = null;
        }
    }
    onFilesAdded() {
        this.uploader.addToQueue(this.file.nativeElement.files, this.formGroup, this.options);
        // Clear the previous input value
        this.file.nativeElement.value = '';
    }
    ngAfterViewInit() {
        if (this.options.multiple !== false)
            this.renderer.setProperty(this.file.nativeElement, 'multiple', 'multiple');
        if (this.options.accept)
            this.renderer.setProperty(this.file.nativeElement, 'accept', this.options.accept.join());
        if (this.options.capture)
            this.renderer.setProperty(this.file.nativeElement, 'capture', this.options.capture);
    }
}
InputfileComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-upload-inputfile',
                template: `
      <label class="input-file">
          <input type="file" #file (change)="onFilesAdded()">
          <ng-content></ng-content>
      </label>`,
                styles: ['input[type="file"] { display: none; } .input-file { width: 100%; }']
            },] }
];
InputfileComponent.ctorParameters = () => [
    { type: Injector },
    { type: HttpClientUploadService },
    { type: Renderer2 },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] }
];
InputfileComponent.propDecorators = {
    file: [{ type: ViewChild, args: ['file', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRmaWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2lucHV0ZmlsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25HLE9BQU8sRUFBYSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUd2RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQVkvRSxNQUFNLE9BQU8sa0JBQWtCO0lBVzdCLFlBQW9CLFFBQWtCLEVBQVUsUUFBaUMsRUFBVSxRQUFtQixFQUM5RSxNQUFjLEVBQXNCLGtCQUFzQztRQUR0RixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQzlFLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBc0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVIxRyxVQUFLLEdBQWMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQVMzQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDOUI7YUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztTQUMxQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssS0FBSztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoSCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEgsQ0FBQzs7O1lBekNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUU7Ozs7ZUFJRzt5QkFDSixvRUFBb0U7YUFDOUU7OztZQWZrQyxRQUFRO1lBSWxDLHVCQUF1QjtZQUp1QixTQUFTO1lBQ3hCLE1BQU0sdUJBMkIvQixRQUFRO1lBM0JILGtCQUFrQix1QkEyQmEsUUFBUTs7O21CQVZ4RCxTQUFTLFNBQUMsTUFBTSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgSW5qZWN0b3IsIE9wdGlvbmFsLCBSZW5kZXJlcjIsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtR3JvdXBEaXJlY3RpdmUsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgSW5wdXRGaWxlT3B0aW9ucyB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgSHR0cENsaWVudFVwbG9hZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9odHRwQ2xpZW50VXBsb2FkLnNlcnZpY2UnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC11cGxvYWQtaW5wdXRmaWxlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICAgIDxsYWJlbCBjbGFzcz1cImlucHV0LWZpbGVcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiAjZmlsZSAoY2hhbmdlKT1cIm9uRmlsZXNBZGRlZCgpXCI+XG4gICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9sYWJlbD5gLFxuICBzdHlsZXM6IFsnaW5wdXRbdHlwZT1cImZpbGVcIl0geyBkaXNwbGF5OiBub25lOyB9IC5pbnB1dC1maWxlIHsgd2lkdGg6IDEwMCU7IH0nXVxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dGZpbGVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBAVmlld0NoaWxkKCdmaWxlJywge3N0YXRpYzogdHJ1ZX0pIGZpbGU7XG5cbiAgZmlsZXM6IFNldDxGaWxlPiA9IG5ldyBTZXQoKTtcblxuICBvcHRpb25zOiBJbnB1dEZpbGVPcHRpb25zO1xuXG4gIHByaXZhdGUgZm9ybUdyb3VwOiBGb3JtR3JvdXAgfCBudWxsO1xuXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgdXBsb2FkZXI6IEh0dHBDbGllbnRVcGxvYWRTZXJ2aWNlLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbmdGb3JtOiBOZ0Zvcm0sIEBPcHRpb25hbCgpIHByaXZhdGUgZm9ybUdyb3VwRGlyZWN0aXZlOiBGb3JtR3JvdXBEaXJlY3RpdmUpIHtcbiAgICBpZiAodGhpcy5uZ0Zvcm0pIHtcbiAgICAgIHRoaXMuZm9ybUdyb3VwID0gbmdGb3JtLmZvcm07XG4gICAgfSBlbHNlIGlmICh0aGlzLmZvcm1Hcm91cERpcmVjdGl2ZSkge1xuICAgICAgdGhpcy5mb3JtR3JvdXAgPSBmb3JtR3JvdXBEaXJlY3RpdmUuZm9ybTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JtR3JvdXAgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG9uRmlsZXNBZGRlZCgpIHtcbiAgICB0aGlzLnVwbG9hZGVyLmFkZFRvUXVldWUodGhpcy5maWxlLm5hdGl2ZUVsZW1lbnQuZmlsZXMsIHRoaXMuZm9ybUdyb3VwLCB0aGlzLm9wdGlvbnMpO1xuICAgIC8vIENsZWFyIHRoZSBwcmV2aW91cyBpbnB1dCB2YWx1ZVxuICAgIHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5tdWx0aXBsZSAhPT0gZmFsc2UpIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5maWxlLm5hdGl2ZUVsZW1lbnQsICdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXB0KSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LCAnYWNjZXB0JywgdGhpcy5vcHRpb25zLmFjY2VwdC5qb2luKCkpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY2FwdHVyZSkgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmZpbGUubmF0aXZlRWxlbWVudCwgJ2NhcHR1cmUnLCB0aGlzLm9wdGlvbnMuY2FwdHVyZSk7XG4gIH1cbn1cbiJdfQ==