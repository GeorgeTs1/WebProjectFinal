/**
 * Simple service for logging the module.
 */
export class NgxUploadLogger {
}
const noop = () => undefined;
const ɵ0 = noop;
/**
 * Default implementation of Logger that safely writes the message into the console.
 *
 */
export class ConsoleLogger {
    constructor(_console, _debugEnabled = true) {
        this._console = _console;
        this._debugEnabled = _debugEnabled;
    }
    log(...args) { this._invokeConsoleMethod('log', args); }
    info(...args) { this._invokeConsoleMethod('info', args); }
    warn(...args) { this._invokeConsoleMethod('warn', args); }
    error(...args) { this._invokeConsoleMethod('error', args); }
    debug(...args) {
        if (this._debugEnabled) {
            this._invokeConsoleMethod('debug', args);
        }
    }
    _invokeConsoleMethod(type, args) {
        let logFn = this._console[type] || this._console.log || noop;
        // console methods in IE9 don't have 'apply' method, polyfill it
        if (!logFn.apply) {
            logFn = Function.prototype.bind.call(logFn, this._console);
        }
        logFn.apply(this._console, args);
    }
}
/**
 * No op implementation of Logger.
 *
 */
export class NoOpLogger {
    log() { }
    info() { }
    warn() { }
    error() { }
    debug() { }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2xvZ2dlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7R0FFRztBQUNILE1BQU0sT0FBZ0IsZUFBZTtDQWdCcEM7QUFFRCxNQUFNLElBQUksR0FBRyxHQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUM7O0FBRWxDOzs7R0FHRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBQ3RCLFlBQW9CLFFBQWlCLEVBQVUsZ0JBQWdCLElBQUk7UUFBL0MsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFPO0lBQUcsQ0FBQztJQUV2RSxHQUFHLENBQUMsR0FBRyxJQUFXLElBQVUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckUsSUFBSSxDQUFDLEdBQUcsSUFBVyxJQUFVLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZFLElBQUksQ0FBQyxHQUFHLElBQVcsSUFBVSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2RSxLQUFLLENBQUMsR0FBRyxJQUFXLElBQVUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFekUsS0FBSyxDQUFDLEdBQUcsSUFBVztRQUNoQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQUU7SUFDekUsQ0FBQztJQUVPLG9CQUFvQixDQUFDLElBQVksRUFBRSxJQUFZO1FBQ25ELElBQUksS0FBSyxHQUFtQixJQUFJLENBQUMsUUFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztRQUU5RSxnRUFBZ0U7UUFDaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDZCxLQUFLLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUQ7UUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFDbkIsR0FBRyxLQUFVLENBQUM7SUFFZCxJQUFJLEtBQVUsQ0FBQztJQUVmLElBQUksS0FBVSxDQUFDO0lBRWYsS0FBSyxLQUFVLENBQUM7SUFFaEIsS0FBSyxLQUFVLENBQUM7Q0FFbkIiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcgdGhlIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5neFVwbG9hZExvZ2dlciB7XG4gICAgLyoqIFdyaXRlIGEgbG9nIG1lc3NhZ2UuICovXG4gICAgYWJzdHJhY3QgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcblxuICAgIC8qKiBXcml0ZSBhbiBpbmZvcm1hdGlvbiBtZXNzYWdlLiAqL1xuICAgIGFic3RyYWN0IGluZm8oLi4uYXJnczogYW55W10pOiB2b2lkO1xuXG4gICAgLyoqIFdyaXRlIGEgd2FybmluZyBtZXNzYWdlLiAqL1xuICAgIGFic3RyYWN0IHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkO1xuXG4gICAgLyoqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2UuICovXG4gICAgYWJzdHJhY3QgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkO1xuXG4gICAgLyoqIFdyaXRlIGEgZGVidWcgbWVzc2FnZS4gKi9cbiAgICBhYnN0cmFjdCBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG5cbn1cblxuY29uc3Qgbm9vcCA9ICgpOiBhbnkgPT4gdW5kZWZpbmVkO1xuXG4vKipcbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgTG9nZ2VyIHRoYXQgc2FmZWx5IHdyaXRlcyB0aGUgbWVzc2FnZSBpbnRvIHRoZSBjb25zb2xlLlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnNvbGVMb2dnZXIgaW1wbGVtZW50cyBOZ3hVcGxvYWRMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbnNvbGU6IENvbnNvbGUsIHByaXZhdGUgX2RlYnVnRW5hYmxlZCA9IHRydWUpIHt9XG5cbiAgICBsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHsgdGhpcy5faW52b2tlQ29uc29sZU1ldGhvZCgnbG9nJywgYXJncyk7IH1cblxuICAgIGluZm8oLi4uYXJnczogYW55W10pOiB2b2lkIHsgdGhpcy5faW52b2tlQ29uc29sZU1ldGhvZCgnaW5mbycsIGFyZ3MpOyB9XG5cbiAgICB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7IHRoaXMuX2ludm9rZUNvbnNvbGVNZXRob2QoJ3dhcm4nLCBhcmdzKTsgfVxuXG4gICAgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkIHsgdGhpcy5faW52b2tlQ29uc29sZU1ldGhvZCgnZXJyb3InLCBhcmdzKTsgfVxuXG4gICAgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlYnVnRW5hYmxlZCkgeyB0aGlzLl9pbnZva2VDb25zb2xlTWV0aG9kKCdkZWJ1ZycsIGFyZ3MpOyB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaW52b2tlQ29uc29sZU1ldGhvZCh0eXBlOiBzdHJpbmcsIGFyZ3M/OiBhbnlbXSk6IHZvaWQge1xuICAgICAgICBsZXQgbG9nRm46IEZ1bmN0aW9uID0gKDxhbnk+dGhpcy5fY29uc29sZSlbdHlwZV0gfHwgdGhpcy5fY29uc29sZS5sb2cgfHwgbm9vcDtcblxuICAgICAgICAvLyBjb25zb2xlIG1ldGhvZHMgaW4gSUU5IGRvbid0IGhhdmUgJ2FwcGx5JyBtZXRob2QsIHBvbHlmaWxsIGl0XG4gICAgICAgIGlmICghbG9nRm4uYXBwbHkpIHtcbiAgICAgICAgICAgIGxvZ0ZuID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChsb2dGbiwgdGhpcy5fY29uc29sZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2dGbi5hcHBseSh0aGlzLl9jb25zb2xlLCBhcmdzKTtcbiAgICB9XG59XG5cbi8qKlxuICogTm8gb3AgaW1wbGVtZW50YXRpb24gb2YgTG9nZ2VyLlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIE5vT3BMb2dnZXIgaW1wbGVtZW50cyBOZ3hVcGxvYWRMb2dnZXIge1xuICAgIGxvZygpOiB2b2lkIHt9XG5cbiAgICBpbmZvKCk6IHZvaWQge31cblxuICAgIHdhcm4oKTogdm9pZCB7fVxuXG4gICAgZXJyb3IoKTogdm9pZCB7fVxuXG4gICAgZGVidWcoKTogdm9pZCB7fVxuXG59XG4iXX0=