{"version":3,"sources":["../../src/services/fileItem.model.ts","../../node_modules/tslib/tslib.es6.js","../../src/utils/logger.model.ts","../../src/services/httpClientUpload.service.ts","../../src/utils/configuration.model.ts","../../src/directives/dropzone.directive.ts","../../src/directives/thumbnail.directive.ts","../../src/components/inputfile.component.ts","../../src/directives/inputfile.directive.ts","../../src/ngx-upload.module.ts"],"names":["FileItem","file","uploadService","logger","disableMultipart","this","isReady","progress","formData","FormData","alias","prototype","upload","endpoint","options","uploadFileItem","error","cancel","debug","uploadInProgress","ɵonCancel","cancelFileItem","remove","removeFromQueue","ɵonBeforeUploadItem","isSuccess","isCancel","isError","ɵonProgress","ɵonSuccess","ɵonError","sub","unsubscribe","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","__spread","arguments","concat","noop","ConsoleLogger","_console","_debugEnabled","log","args","_i","_invokeConsoleMethod","info","warn","type","logFn","apply","Function","bind","NoOpLogger","HttpClientUploadService","httpClient","progressTotal","onCancel$","Subject","onError$","onDropError$","onSuccess$","onBeforeUploadItem$","onProgress$","onAddToQueue$","queue","Array","headers","Map","addToQueue","files","formGroup","multiple","errorAccept","errorMultiple","fileItem","item","this_1","accept","some","indexOf","split","Object","keys","controls","forEach","key","append","get","_this","method","url","index","onBeforeUploadItem","sendable","name","req","HttpRequest","assign","reportProgress","request","subscribe","event","HttpEventType","UploadProgress","percentDone","Math","round","loaded","total","onProgressItem","HttpResponse","onSuccess","body","status","err","HttpErrorResponse","message","Error","onError","computeTotalProgress","uploadAll","items","filter","items_1","items_1_1","cancelAll","items_2","items_2_1","removeAllFromQueue","items_3","items_3_1","splice","totalCurrent","_b","_c","size","Injectable","providedIn","NgxUploadLogger","HttpClient","NGX_DROP_TARGET_OPTIONS","InjectionToken","NGX_LOGGER_OPTIONS","ngxDropTargetOptions","color","colorDrag","colorDrop","ngxloggerOptions","enabled","ngxInputFileOptions","NgxDragAndDropDirective","el","renderer","injector","uploader","dropOptions","ngForm","formGroupDirective","platformId","form","isPlatformBrowser","listen","nativeElement","$event","onDragLeave","dropEvent","onDragOver","defineProperty","JSON","stringify","ngOnInit","addClass","removeClass","stopAndPrevent","transfer","getTransfer","dropEffect","haveFiles","types","stopPropagation","preventDefault","dataTransfer","originalEvent","contains","Directive","selector","exportAs","ElementRef","Renderer2","Injector","Inject","NgForm","decorators","Optional","FormGroupDirective","PLATFORM_ID","Input","NgxThumbnailDirective","imgEl_1","createElement","appendChild","setStyle","_getOrientation","srcOrientation","img","Image","reader","FileReader","onload","evt","width","height","canvas","document","ctx","getContext","drawImage","transform","setProperty","toDataURL","src","target","result","readAsDataURL","callback","view","DataView","getUint16","byteLength","offset","marker","getUint32","little","tags","readAsArrayBuffer","slice","InputfileComponent","Set","onFilesAdded","ngAfterViewInit","join","capture","Component","template","ViewChild","static","NgxInputFileDirective","resolver","vcRef","templateRef","_contentViewRef","createEmbeddedView","factory","resolveComponentFactory","createComponent","rootNodes","instance","ngxInputFile","detectChanges","ComponentFactoryResolver","ViewContainerRef","TemplateRef","ngxDeclarations","_loggerFactory","isDevMode","console","NGX_UPLOAD_ROOT_GUARD","createNgxUploadRootGuard","NgxUploadModule","forRoot","dropTargetOptions","loggerOptions","ngModule","providers","provide","useValue","useFactory","deps","SkipSelf","NgModule","declarations","exports","imports","entryComponents"],"mappings":"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","sourcesContent":["import { NgxUploadLogger } from '../utils/logger.model';\nimport { Subscription } from 'rxjs';\nimport { UploadEndPoint } from '../utils/configuration.model';\nimport { HttpClientUploadService } from './httpClientUpload.service';\n\nexport class FileItem {\n\n    uploadInProgress: boolean;\n    isReady = true;\n    isSuccess: boolean;\n    isCancel: boolean;\n    isError: boolean;\n    progress = 0;\n\n    formData: FormData = new FormData();\n\n    alias = 'file';\n\n    sub: Subscription;\n\n    constructor(public file: File, private uploadService: HttpClientUploadService, protected logger: NgxUploadLogger,\n                public disableMultipart) { }\n\n    upload(endpoint: UploadEndPoint, options?: any) {\n        if (endpoint) {\n            this.uploadService.uploadFileItem(this, endpoint, options);\n        } else {\n            this.logger.error('You must define a UploadEndPoint object.');\n        }\n    }\n\n    cancel() {\n        this.logger.debug('upload cancel');\n        if (this.uploadInProgress) {\n            this.ɵonCancel();\n            this.uploadService.cancelFileItem(this);\n        }\n    }\n\n    remove() {\n        this.logger.debug('upload remove');\n        this.uploadService.removeFromQueue(this);\n    }\n\n    ɵonBeforeUploadItem() {\n        this.isReady = true;\n        this.uploadInProgress = false;\n        this.isSuccess = false;\n        this.isCancel = false;\n        this.isError = false;\n        this.progress = 0;\n    }\n\n    ɵonProgress(progress: number) {\n        this.isReady = false;\n        this.progress = progress;\n    }\n\n    ɵonSuccess() {\n        this.isReady = false;\n        this.uploadInProgress = false;\n        this.isSuccess = true;\n        this.isCancel = false;\n        this.isError = false;\n        this.progress = 100;\n    }\n\n    ɵonError() {\n        this.isReady = false;\n        this.uploadInProgress = false;\n        this.isSuccess = false;\n        this.isCancel = false;\n        this.isError = true;\n        this.progress = 0;\n    }\n\n    ɵonCancel() {\n        this.isReady = true;\n        this.uploadInProgress = false;\n        this.isSuccess = false;\n        this.isCancel = true;\n        this.isError = false;\n        this.progress = 0;\n        this.sub.unsubscribe();\n    }\n\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\n/**\n * Simple service for logging the module.\n */\nexport abstract class NgxUploadLogger {\n    /** Write a log message. */\n    abstract log(...args: any[]): void;\n\n    /** Write an information message. */\n    abstract info(...args: any[]): void;\n\n    /** Write a warning message. */\n    abstract warn(...args: any[]): void;\n\n    /** Write an error message. */\n    abstract error(...args: any[]): void;\n\n    /** Write a debug message. */\n    abstract debug(...args: any[]): void;\n\n}\n\nconst noop = (): any => undefined;\n\n/**\n * Default implementation of Logger that safely writes the message into the console.\n *\n */\nexport class ConsoleLogger implements NgxUploadLogger {\n    constructor(private _console: Console, private _debugEnabled = true) {}\n\n    log(...args: any[]): void { this._invokeConsoleMethod('log', args); }\n\n    info(...args: any[]): void { this._invokeConsoleMethod('info', args); }\n\n    warn(...args: any[]): void { this._invokeConsoleMethod('warn', args); }\n\n    error(...args: any[]): void { this._invokeConsoleMethod('error', args); }\n\n    debug(...args: any[]): void {\n        if (this._debugEnabled) { this._invokeConsoleMethod('debug', args); }\n    }\n\n    private _invokeConsoleMethod(type: string, args?: any[]): void {\n        let logFn: Function = (<any>this._console)[type] || this._console.log || noop;\n\n        // console methods in IE9 don't have 'apply' method, polyfill it\n        if (!logFn.apply) {\n            logFn = Function.prototype.bind.call(logFn, this._console);\n        }\n\n        logFn.apply(this._console, args);\n    }\n}\n\n/**\n * No op implementation of Logger.\n *\n */\nexport class NoOpLogger implements NgxUploadLogger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n\n}\n","import { FormGroup } from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpEventType,\n  HttpHeaders,\n  HttpParams,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { FileItem } from './fileItem.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { DropTargetOptions, InputFileOptions, UploadEndPoint } from '../utils/configuration.model';\n\n\n// send an event for each upload event. These events can be catched by the user for call a callback\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientUploadService {\n\n  queue: FileItem[];\n  progressTotal = 0;\n  withCredentials: boolean;\n\n  sub: Subscription;\n\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  protected headers: Map<string, string[]>;\n\n  public onCancel$ = new Subject<FileItem>();\n  public onError$ = new Subject<{ item: FileItem, body: any, status: number, headers: any }>();\n  public onDropError$ = new Subject<{ item?: File, errorAccept: boolean, errorMultiple: boolean }>();\n  public onSuccess$ = new Subject<{ item: FileItem, body: any, status: number, headers: any }>(); // TODO headers isn't `any` but `Array`\n  public onBeforeUploadItem$ = new Subject<FileItem>();\n  public onProgress$ = new Subject<{ item: FileItem, progress: number }>();\n  public onAddToQueue$ = new Subject<FileItem>();\n\n  constructor(protected logger: NgxUploadLogger, private httpClient: HttpClient) {\n    this.queue = new Array<FileItem>();\n    this.headers = new Map();\n  }\n\n  /**\n   * Adds files to the queue\n   */\n  addToQueue(files: FileList, formGroup: FormGroup | null, options: DropTargetOptions | InputFileOptions) {\n\n    this.logger.info('add to queue');\n\n    if (options && !options.multiple) {\n      if (files.length > 1) {\n        this.logger.error('there is more than one file.');\n        this.onDropError$.next({errorAccept: false, errorMultiple: true});\n        return;\n      }\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i)!;\n      this.logger.debug(files.item(i));\n\n      if (options && options.accept) {\n        const accepted = options.accept.some((type: string) => {\n          if (type.indexOf('/*') > -1) {\n            return type.split('/')[0] === file.type.split('/')[0]\n          } else {\n            return (type === '*' || type === file.type)\n          }\n        });\n        if (!accepted) {\n          this.logger.error('this file is not accepted because of its type', file);\n          this.onDropError$.next({item: file, errorAccept: true, errorMultiple: false});\n          continue\n        }\n      }\n\n      let fileItem;\n      if (options && options.disableMultipart) {\n        fileItem = new FileItem(file, this, this.logger, true);\n      } else {\n        fileItem = new FileItem(file, this, this.logger, false);\n        if (formGroup) {\n          Object.keys(formGroup.controls).forEach((key) => {\n            fileItem.formData.append(key, formGroup.get(key) !.value);\n          });\n        }\n      }\n      this.queue.push(fileItem);\n      this.onAddToQueue$.next(fileItem);\n    }\n  }\n\n  uploadFileItem(fileItem: FileItem, endpoint: UploadEndPoint, options: {\n    headers?: HttpHeaders;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n  } = {}): void {\n    this.logger.info('enter uploadService.uploadFileItem()');\n\n    const method = endpoint.method as string;\n    const url = endpoint.url as string;\n\n    const index = this.queue.indexOf(fileItem);\n    const item = this.queue[index];\n\n    this.onBeforeUploadItem(item);\n\n    if (item.isCancel) {\n      return\n    }\n\n    item.uploadInProgress = true;\n\n    let sendable;\n\n    if (!fileItem.disableMultipart) {\n      sendable = item.formData;\n      sendable.append(item.alias, item.file, item.file.name);\n    } else {\n      sendable = item.file;\n    }\n\n    const req = new HttpRequest(method, url, sendable, Object.assign(options, {reportProgress: true}));\n\n    fileItem.sub = this.httpClient.request(req).subscribe(\n      (event) => {\n        if (event.type === HttpEventType.UploadProgress) {\n          // This is an upload progress event. Compute and show the % done:\n          const percentDone = Math.round(event.loaded * 100 / (event.total ? event.total : event.loaded));\n          this.logger.debug(`File is ${percentDone}% uploaded.`);\n          fileItem.ɵonProgress(percentDone);\n          this.onProgressItem(item, percentDone);\n\n        } else if (event instanceof HttpResponse) {\n          // A successful response is delivered on the event stream.\n          fileItem.ɵonSuccess();\n          this.onSuccess(item, event.body, event.status, event.headers);\n        }\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (url === 'ngx_upload_mock') {\n            item.ɵonSuccess();\n            this.onSuccess(item, err.message, err.status, err.headers);\n          } else if (err.error instanceof Error) {\n            // A client-side or network error occurred. Handle it accordingly.\n            item.ɵonError();\n            this.onError(item, err.error.message, err.status, err.headers);\n          } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            item.ɵonError();\n            this.onError(item, err.error, err.status, err.headers);\n          }\n        }\n      }\n    );\n  }\n\n  cancelFileItem(fileItem: FileItem) {\n    this.progressTotal = this.computeTotalProgress();\n    this.onCancel$.next(fileItem)\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  uploadAll(endpoint: UploadEndPoint, options?: any) {\n    const items = this.queue.filter(item => (item.isReady));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      item.upload(endpoint, options);\n    }\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  cancelAll() {\n    const items: FileItem[] = this.queue.filter(item => (item.uploadInProgress));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      item.cancel();\n    }\n    this.progressTotal = this.computeTotalProgress();\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  removeAllFromQueue() {\n    const items: FileItem[] = this.queue.filter(item => (!item.uploadInProgress && !item.isSuccess));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      this.removeFromQueue(item);\n    }\n  }\n\n  removeFromQueue(fileItem: FileItem) {\n    const index = this.queue.indexOf(fileItem);\n    const item = this.queue[index];\n    if (item.uploadInProgress) {\n      item.cancel();\n    }\n    this.queue.splice(index, 1);\n    this.progressTotal = this.computeTotalProgress();\n  }\n\n\n  /**\n   * Returns the total progress\n   * @param {Number} [value]\n   * @returns {Number}\n   * @private\n   */\n  computeTotalProgress(): number {\n    let totalCurrent = 0;\n    let total = 0;\n    for (const item of this.queue) {\n      if (item.uploadInProgress || item.isSuccess) {\n        totalCurrent += (item.file.size / 100) * item.progress || 0;\n        total += item.file.size;\n        this.logger.debug(totalCurrent + ' / ' + total);\n      }\n    }\n    return Math.round((totalCurrent * 100) / total);\n  }\n\n  /**\n   * Prepares file status before upload\n   * @param item\n   */\n  protected onBeforeUploadItem(item: FileItem) {\n    this.logger.info('enter uploadService.ɵonBeforeUploadItem()');\n    item.ɵonBeforeUploadItem();\n    this.onBeforeUploadItem$.next(item);\n  }\n\n  /**\n   * Update status during upload progress\n   * @param item\n   * @param progress\n   */\n  protected onProgressItem(item: FileItem, progress: number): void {\n    this.logger.info(`call onProgressItem ${item} ${progress}`);\n    this.progressTotal = this.computeTotalProgress();\n    item.ɵonProgress(progress);\n    this.onProgress$.next({item, progress});\n  }\n\n  /**\n   * Callback called when an upload error occurs\n   * @param item\n   * @param xhr\n   */\n  protected onError(item: FileItem, body: any, status: number, headers: any) {\n    this.logger.info(`call onError ${item} ${body} ${status} ${headers}`);\n    item.ɵonError();\n    this.onError$.next({item, body, status, headers});\n  }\n\n  /**\n   * Callback called when an upload success occurs\n   * @param item\n   * @param xhr\n   */\n  protected onSuccess(item: FileItem, body: any, status: number, headers: any) { // TODO headers is not any\n    this.logger.info(`call onSuccess ${item} ${body} ${status} ${headers}`);\n    this.progressTotal = this.computeTotalProgress();\n    item.ɵonSuccess();\n    this.onSuccess$.next({item, body, status, headers});\n  }\n\n\n}\n\n","import { InjectionToken } from '@angular/core';\nimport { MineTypeEnum } from './mimetype.model';\n\nexport type Method = 'POST' | 'GET';\n\nexport interface DropTargetOptions {\n  color: string;\n  colorDrag: string;\n  colorDrop: string;\n  accept?: MineTypeEnum[];\n  capture?: 'user' | 'environment';\n  multiple?: boolean;\n  disableMultipart?: boolean;\n}\n\nexport interface LoggerOptions {\n  enabled?: boolean;\n  debug?: boolean;\n}\n\nexport interface UploadEndPoint {\n  method?: Method;\n  url?: string;\n}\n\nexport interface InputFileOptions {\n  accept?: MineTypeEnum[];\n  capture?: 'user' | 'environment';\n  multiple?: boolean;\n  disableMultipart?: boolean;\n}\n\nexport const NGX_DROP_TARGET_OPTIONS = new InjectionToken<DropTargetOptions>('Ngx drop Zone Options');\nexport const NGX_LOGGER_OPTIONS = new InjectionToken<LoggerOptions>('Ngx Logger Options');\n\n\nexport const ngxDropTargetOptions: DropTargetOptions = {\n  color: '',\n  colorDrag: '',\n  colorDrop: '',\n  multiple: true,\n  disableMultipart: false\n};\n\nexport const ngxloggerOptions: LoggerOptions = {\n  enabled: false,\n  debug: true\n};\n\nexport const ngxInputFileOptions: InputFileOptions = {\n  multiple: true,\n  disableMultipart: false\n};\n","import {\n    Directive,\n    ElementRef,\n    HostListener,\n    Input,\n    OnInit,\n    Renderer2,\n    Inject, Injector, Optional, PLATFORM_ID\n} from '@angular/core';\nimport { FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\nimport {\n    DropTargetOptions, NGX_DROP_TARGET_OPTIONS\n} from '../utils/configuration.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { HttpClientUploadService } from '../services/httpClientUpload.service';\nimport {isPlatformBrowser} from '@angular/common';\n\n\n/**\n * Transforms a node into a drag and drop zone.\n */\n@Directive({\n    selector: '[ngxDragAndDrop]',\n    exportAs: 'ngxDragAndDrop'\n})\nexport class NgxDragAndDropDirective implements OnInit {\n\n    private readonly formGroup: FormGroup | null;\n\n    @Input()\n    set ngxDragAndDrop(dropOptions: DropTargetOptions) {\n        if (dropOptions) {\n            this.logger.debug(JSON.stringify(dropOptions));\n            this.dropOptions = dropOptions;\n        }\n    }\n\n    constructor(private el: ElementRef,\n                private renderer: Renderer2,\n                private injector: Injector,\n                private logger: NgxUploadLogger,\n                public uploader: HttpClientUploadService,\n                @Inject(NGX_DROP_TARGET_OPTIONS) private dropOptions: DropTargetOptions,\n                @Optional() private ngForm: NgForm, @Optional() private formGroupDirective: FormGroupDirective,\n                @Inject(PLATFORM_ID) platformId: Object) {\n        if (this.ngForm) {\n            this.formGroup = ngForm.form;\n        } else if (this.formGroupDirective) {\n            this.formGroup = formGroupDirective.form;\n        } else {\n            this.formGroup = null;\n        }\n        if (isPlatformBrowser(platformId)) {\n            this.renderer.listen(el.nativeElement, 'dragleave', ($event) => this.onDragLeave($event));\n            this.renderer.listen(el.nativeElement, 'drop', ($event) => this.dropEvent($event));\n            this.renderer.listen(el.nativeElement, 'dragover', ($event) => this.onDragOver($event));\n        }\n    }\n\n    ngOnInit(): void {\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);\n    }\n\n    onDragLeave(event) {\n        this.logger.debug('dragleave event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);\n        this.stopAndPrevent(event);\n    }\n\n    dropEvent(event) {\n        this.logger.debug('drop event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        const transfer = this.getTransfer(event);\n        if (!transfer) {\n            return;\n        }\n        transfer.dropEffect = 'copy';\n        this.stopAndPrevent(event);\n        this.uploader.addToQueue(transfer.files, this.formGroup, this.dropOptions);\n    }\n\n\n    onDragOver(event) {\n        this.logger.debug('dragover event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        const transfer = this.getTransfer(event);\n        if (!this.haveFiles(transfer.types)) {\n            return;\n        }\n        this.stopAndPrevent(event);\n    }\n\n    private stopAndPrevent(event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTransfer(event): DataTransfer {\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n    }\n\n    private haveFiles(types: any): boolean {\n        if (!types) {\n            return false;\n        }\n        if (types.indexOf) {\n            return types.indexOf('Files') !== -1;\n        } else if (types.contains) {\n            return types.contains('Files');\n        } else {\n            return false;\n        }\n    }\n\n}\n","import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\nimport { FileItem } from '../services/fileItem.model';\n\n/**\n * Transforms a node into a thumbnail zone.\n */\n@Directive({\n    selector: '[ngxThumbnail]',\n    exportAs: 'ngxThumbnail'\n})\nexport class NgxThumbnailDirective implements OnInit {\n\n    @Input('ngxThumbnail') fileItem: FileItem;\n\n    constructor(private renderer: Renderer2, private el: ElementRef) { }\n\n    ngOnInit() {\n        // must be used only with image file\n        if (this.fileItem.file.type.indexOf('image/jpeg') !== 0 &&\n            this.fileItem.file.type.indexOf('image/png') !== 0) {\n            return\n        } else {\n\n            const imgEl = this.renderer.createElement('img');\n            this.renderer.appendChild(this.el.nativeElement, imgEl);\n            this.renderer.setStyle(imgEl, 'width', '100%');\n            this.renderer.setStyle(imgEl, 'height', '100%');\n\n            this._getOrientation(this.fileItem.file, (srcOrientation) => {\n\n                const img = new Image();\n                const reader = new FileReader();\n\n                reader.onload = (evt) => {\n\n                    img.onload = () => {\n                        const width = img.width,\n                            height = img.height,\n                            canvas = document.createElement('canvas'),\n                            ctx = canvas.getContext('2d')!;\n\n                        canvas.width = width;\n                        canvas.height = height;\n\n                        // draw image\n                        ctx.drawImage(img, 0, 0);\n\n                        // transform context before drawing image\n                        switch (srcOrientation) {\n                            case 2:\n                                ctx.transform(-1, 0, 0, 1, width, 0);\n                                break;\n                            case 3:\n                                ctx.transform(-1, 0, 0, -1, width, height);\n                                break;\n                            case 4:\n                                ctx.transform(1, 0, 0, -1, 0, height);\n                                break;\n                            case 5:\n                                ctx.transform(0, 1, 1, 0, 0, 0);\n                                break;\n                            case 6:\n                                ctx.transform(0, 1, -1, 0, height, 0);\n                                break;\n                            case 7:\n                                ctx.transform(0, -1, -1, 0, height, width);\n                                break;\n                            case 8:\n                                ctx.transform(0, -1, 1, 0, 0, width);\n                                break;\n                            default:\n                                break;\n                        }\n                        this.renderer.setProperty(imgEl, 'src', canvas.toDataURL());\n                    };\n\n                    img.src = (evt.target! as any).result as string;\n                };\n                reader.readAsDataURL(this.fileItem.file);\n\n            });\n        }\n    }\n\n    /*\n    * getOrientation computes the real orientation of the image\n    *\n    */\n    _getOrientation(file, callback) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n\n            const view = new DataView((event.target! as any).result as ArrayBuffer);\n\n            if (view.getUint16(0, false) !== 0xFFD8) return callback(-2);\n\n            const length = view.byteLength;\n            let offset = 2;\n\n            while (offset < length) {\n                const marker = view.getUint16(offset, false);\n                offset += 2;\n\n                if (marker === 0xFFE1) {\n                    if (view.getUint32(offset += 2, false) !== 0x45786966) {\n                        return callback(-1);\n                    }\n                    const little = view.getUint16(offset += 6, false) === 0x4949;\n                    offset += view.getUint32(offset + 4, little);\n                    const tags = view.getUint16(offset, little);\n                    offset += 2;\n\n                    for (let i = 0; i < tags; i++)\n                        if (view.getUint16(offset + (i * 12), little) === 0x0112)\n                            return callback(view.getUint16(offset + (i * 12) + 8, little));\n                } else if ((marker & 0xFF00) !== 0xFF00) break;\n                else offset += view.getUint16(offset, false);\n            }\n            return callback(-1);\n        };\n        reader.readAsArrayBuffer(file.slice(0, 64 * 1024));\n    };\n}\n","import { AfterViewInit, Component, Injector, Optional, Renderer2, ViewChild } from '@angular/core';\nimport { FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\n\nimport { InputFileOptions } from '../utils/configuration.model';\nimport { HttpClientUploadService } from '../services/httpClientUpload.service';\n\n\n@Component({\n  selector: 'ngx-upload-inputfile',\n  template: `\n      <label class=\"input-file\">\n          <input type=\"file\" #file (change)=\"onFilesAdded()\">\n          <ng-content></ng-content>\n      </label>`,\n  styles: ['input[type=\"file\"] { display: none; } .input-file { width: 100%; }']\n})\nexport class InputfileComponent implements AfterViewInit {\n\n  @ViewChild('file', {static: true}) file;\n\n  files: Set<File> = new Set();\n\n  options: InputFileOptions;\n\n  private formGroup: FormGroup | null;\n\n\n  constructor(private injector: Injector, private uploader: HttpClientUploadService, private renderer: Renderer2,\n              @Optional() private ngForm: NgForm, @Optional() private formGroupDirective: FormGroupDirective) {\n    if (this.ngForm) {\n      this.formGroup = ngForm.form;\n    } else if (this.formGroupDirective) {\n      this.formGroup = formGroupDirective.form;\n    } else {\n      this.formGroup = null;\n    }\n  }\n\n  onFilesAdded() {\n    this.uploader.addToQueue(this.file.nativeElement.files, this.formGroup, this.options);\n    // Clear the previous input value\n    this.file.nativeElement.value = '';\n  }\n\n  ngAfterViewInit() {\n    if (this.options.multiple !== false) this.renderer.setProperty(this.file.nativeElement, 'multiple', 'multiple');\n    if (this.options.accept) this.renderer.setProperty(this.file.nativeElement, 'accept', this.options.accept.join());\n    if (this.options.capture) this.renderer.setProperty(this.file.nativeElement, 'capture', this.options.capture);\n  }\n}\n","import {\n  ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, OnInit, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { InputfileComponent } from '../components/inputfile.component';\nimport { InputFileOptions, ngxInputFileOptions } from '../utils/configuration.model';\n\n\n@Directive({\n  selector: '[ngxInputFile]'\n})\nexport class NgxInputFileDirective implements OnInit {\n\n  @Input()\n  ngxInputFile: InputFileOptions;\n\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\n              private vcRef: ViewContainerRef, private templateRef: TemplateRef<any>) {\n  }\n\n  ngOnInit() {\n    const _contentViewRef = this.templateRef.createEmbeddedView(null);\n    const factory = this.resolver.resolveComponentFactory(InputfileComponent);\n    const component: ComponentRef<InputfileComponent> = this.vcRef.createComponent(factory, 0, this.injector, [_contentViewRef.rootNodes]);\n    component.instance.options = (this.ngxInputFile) ? this.ngxInputFile : ngxInputFileOptions;\n    _contentViewRef.detectChanges();\n  }\n}\n","import { InjectionToken, isDevMode, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { NgxDragAndDropDirective } from './directives/dropzone.directive';\nimport { NgxThumbnailDirective } from './directives/thumbnail.directive';\nimport { NgxInputFileDirective } from './directives/inputfile.directive';\nimport {\n  DropTargetOptions,\n  LoggerOptions, NGX_DROP_TARGET_OPTIONS,\n  NGX_LOGGER_OPTIONS,\n  ngxDropTargetOptions,\n  ngxloggerOptions\n} from './utils/configuration.model';\nimport { ConsoleLogger, NgxUploadLogger, NoOpLogger } from './utils/logger.model';\nimport { InputfileComponent } from './components/inputfile.component';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst ngxDeclarations = [\n  NgxDragAndDropDirective, NgxThumbnailDirective, InputfileComponent, NgxInputFileDirective\n];\n\n/**\n * Factory associated with internal logger\n * @param options\n * @returns {any}\n * @private\n */\nexport function _loggerFactory(options: LoggerOptions): NgxUploadLogger {\n  const enabled = options.enabled ? options.enabled : isDevMode();\n  if (enabled) {\n    const _console: Console = typeof console === 'object' ? console : <any>{};\n    const debug = options.debug ? options.debug : true;\n    return new ConsoleLogger(_console, debug);\n  }\n  return new NoOpLogger();\n}\n\nexport const NGX_UPLOAD_ROOT_GUARD = new InjectionToken<void>('Internal forRoot Guard');\n\nexport function createNgxUploadRootGuard(options: LoggerOptions) {\n  if (options) {\n    throw new TypeError('NgxUploadModule.forRoot() is called twice.')\n  }\n  return 'guarded';\n}\n\n@NgModule({\n  declarations: [\n    ...ngxDeclarations\n  ],\n  exports: [\n    ...ngxDeclarations\n  ],\n  imports: [],\n  entryComponents: [InputfileComponent]\n})\n\nexport class NgxUploadModule {\n\n  static forRoot(dropTargetOptions?: DropTargetOptions,\n    loggerOptions?: LoggerOptions): ModuleWithProviders<NgxUploadModule> {\n\n\n    return {\n      ngModule: NgxUploadModule,\n      providers: [\n        { provide: NGX_LOGGER_OPTIONS, useValue: (loggerOptions) ? loggerOptions : ngxloggerOptions },\n        {\n          provide: NGX_DROP_TARGET_OPTIONS,\n          useValue: (dropTargetOptions) ? dropTargetOptions : ngxDropTargetOptions\n        },\n        {\n          provide: NgxUploadLogger,\n          useFactory: _loggerFactory,\n          deps: [NGX_LOGGER_OPTIONS]\n        },\n        {\n          provide: NGX_UPLOAD_ROOT_GUARD,\n          useFactory: createNgxUploadRootGuard,\n          deps: [[NGX_LOGGER_OPTIONS, new Optional(), new SkipSelf()]]\n        }\n      ]\n    }\n  };\n}\n\n"]}